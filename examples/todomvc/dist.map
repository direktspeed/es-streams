{"version":3,"file":"dist","sources":["src/model.mjs","src/action.mjs","src/index.mjs"],"sourcesContent":["// @flow\nexport type Id = number\n\nexport type Todo = {\n  description: string,\n  completed: boolean,\n  id: Id\n}\n\nexport const newTodo = (description: string, id: number): Todo =>\n  ({ description, completed: false, id })\n\nexport type Filter = '/' | '/active' | '/completed'\n\nexport type App = {\n  todos: Todo[],\n  focus: ?Id,\n  filter: Filter,\n  nextId: Id\n}\n\nexport const emptyApp: App =\n  { todos: [], focus: null, filter: '/', nextId: 0 }\n\nexport const completedCount = ({ todos }: App): number =>\n  todos.reduce(countIfCompleted, 0)\n\nconst countIfCompleted = (count, { completed }) =>\n  count + (completed ? 1 : 0)\n\nexport const addTodo = (description: string) => (app: App): App =>\n  ({\n    ...app,\n    nextId: app.nextId + 1,\n    todos: app.todos.concat([newTodo(description, app.nextId)])\n  })\n\nexport const removeTodo = (id: Id) => (app: App): App =>\n  ({\n    ...app,\n    todos: app.todos.filter(todo => todo.id !== id)\n  })\n\nexport const updateCompleted = (completed: boolean, id: Id) => (app: App): App =>\n  ({\n    ...app,\n    todos: app.todos.map(todo => todo.id === id ? { ...todo, completed } : todo)\n  })\n\nexport const updateAllCompleted = (completed: boolean) => (app: App): App =>\n  ({\n    ...app,\n    todos: app.todos.map(todo => ({ ...todo, completed }))\n  })\n\nexport const removeAllCompleted = (app: App): App =>\n  ({\n    ...app,\n    todos: app.todos.filter(todo => !todo.completed)\n  })\n\nexport const setFilter = (filter: Filter) => (app: App): App =>\n  ({\n    ...app,\n    filter\n  })\n\n// export const setFocus = (focus: ?Id) => (app: App): App =>\n//   ({\n//     ...app,\n//     focus\n//   })\n//\n// export const updateDescription = (description: string, id: Id) => (app: App): App =>\n//   ({\n//     ...app,\n//     todos: app.todos.map(todo => todo.id === id ? { ...todo, description } : todo)\n//   })\n","// @flow\n/* global HTMLElement, HTMLInputElement, Event, $Call */\nimport { id } from '@most/prelude'\nimport { type App, type Todo, addTodo, updateCompleted, removeTodo, updateAllCompleted, removeAllCompleted, setFilter } from './model.mjs'\n\ntype As<B, A = *> = $Call<A, A => B>\n\ntype DOMEvent<E> = { target: E } & Event\ntype InputEvent = DOMEvent<HTMLInputElement>\ntype ClickEvent = DOMEvent<HTMLElement>\ntype HashChangeEvent = { newURL: string } & Event\n\nconst ENTER_KEY = 'Enter'\n// const ESC_KEY = 'Escape'\n\nexport type Action = App => App\n\nexport const runAction = (app: App, action: Action): App =>\n  action(app)\n\nexport const handleAdd = (e: As<InputEvent>): Action => {\n  const value = e.target.value.trim()\n  if (e.key !== ENTER_KEY || value.length === 0) {\n    return id\n  }\n  e.target.value = ''\n  return addTodo(value)\n}\n\nexport const handleToggleAll = (e: As<InputEvent>): Action =>\n  updateAllCompleted(e.target.checked)\n\nexport const handleComplete = ({ id }: Todo) => (e: As<InputEvent>): Action =>\n  updateCompleted(e.target.checked, id)\n\nexport const handleRemove = ({ id }: Todo) => (e: As<ClickEvent>): Action =>\n  removeTodo(id)\n\nexport const handleRemoveAllCompleted = (e: As<InputEvent>): Action =>\n  removeAllCompleted\n\nexport const handleFilterChange = (e: As<HashChangeEvent>): Action =>\n  setFilter(e.newURL.replace(/^.*#/, ''))\n","// @flow\n// TODO:\n// 1. localStorage\n// 2. todo editing\n/* global Document, Element */\nimport { skipRepeats, map, merge, scan, tap, runEffects } from '@most/core'\nimport { newDefaultScheduler } from '@most/scheduler'\nimport { hashchange } from '@most/dom-event'\nimport { createAdapter } from '@most/adapter'\n\nimport { emptyApp } from './model.mjs'\n//import { View } from './view.jsx'\nimport { handleFilterChange, runAction } from './action.mjs'\nimport * as ReactDOM from 'react-dom'\n\nconst fail = (s: string): empty => { throw new Error(s) }\nconst qs = (s: string, el: Document): Element =>\n  el.querySelector(s) || fail(`${s} not found`)\n\nconst appNode = qs('.todoapp', document)\nconst appState = emptyApp\nconst scheduler = newDefaultScheduler()\n\nconst [addAction, todoActions] = createAdapter()\n\nconst updateFilter = map(handleFilterChange, hashchange(window))\n\nconst actions = merge(todoActions, updateFilter)\n\nconst stateUpdates = skipRepeats(scan(runAction, appState, actions))\nconst viewUpdates = tap(rel => ReactDOM.render(rel, appNode), map(View(addAction), stateUpdates))\n\nrunEffects(viewUpdates, scheduler)\n"],"names":["emptyApp","todos","focus","filter","nextId","setFilter","app","runAction","action","handleFilterChange","e","newURL","replace","fail","s","Error","qs","el","querySelector","appNode","document","appState","scheduler","newDefaultScheduler","addAction","todoActions","createAdapter","updateFilter","map","hashchange","window","actions","merge","stateUpdates","skipRepeats","scan","viewUpdates","tap","rel","ReactDOM","View","runEffects"],"mappings":";;;;;;;AAqBO,MAAMA,QAAa,GACxB;EAAEC,KAAK,EAAE,EAAT;EAAaC,KAAK,EAAE,IAApB;EAA0BC,MAAM,EAAE,GAAlC;EAAuCC,MAAM,EAAE;CAD1C;AAGP,AAqCO,MAAMC,SAAS,GAAIF,MAAD,IAAqBG,GAAD,KAC1C,EACC,GAAGA,GADJ;EAECH;CAHyC,CAAtC;;;;;;;;;;;;AC5DP;AACA;AAeA,AAAO,MAAMI,SAAS,GAAG,CAACD,GAAD,EAAWE,MAAX,KACvBA,MAAM,CAACF,GAAD,CADD;AAGP,AAqBO,MAAMG,kBAAkB,GAAIC,CAAD,IAChCL,SAAS,CAACK,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAAD,CADJ;;ACxCP;AACA;AAaA,MAAMC,IAAI,GAAIC,CAAD,IAAsB;QAAQ,IAAIC,KAAJ,CAAUD,CAAV,CAAN;CAArC;;AACA,MAAME,EAAE,GAAG,CAACF,CAAD,EAAYG,EAAZ,KACTA,EAAE,CAACC,aAAH,CAAiBJ,CAAjB,KAAuBD,IAAI,CAAE,GAAEC,CAAE,YAAN,CAD7B;;AAGA,MAAMK,OAAO,GAAGH,EAAE,CAAC,UAAD,EAAaI,QAAb,CAAlB;AACA,MAAMC,QAAQ,GAAGrB,QAAjB;AACA,MAAMsB,SAAS,GAAGC,mBAAmB,EAArC;AAEA,MAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2BC,aAAa,EAA9C;AAEA,MAAMC,YAAY,GAAGC,GAAG,CAACnB,kBAAD,EAAqBoB,UAAU,CAACC,MAAD,CAA/B,CAAxB;AAEA,MAAMC,OAAO,GAAGC,KAAK,CAACP,WAAD,EAAcE,YAAd,CAArB;AAEA,MAAMM,YAAY,GAAGC,WAAW,CAACC,IAAI,CAAC5B,SAAD,EAAYc,QAAZ,EAAsBU,OAAtB,CAAL,CAAhC;AACA,MAAMK,WAAW,GAAGC,GAAG,CAACC,GAAG,IAAIC,MAAA,CAAgBD,GAAhB,EAAqBnB,OAArB,CAAR,EAAuCS,GAAG,CAACY,IAAI,CAAChB,SAAD,CAAL,EAAkBS,YAAlB,CAA1C,CAAvB;AAEAQ,UAAU,CAACL,WAAD,EAAcd,SAAd,CAAV"}